# docker-compose.yml
version: '3.8' # Especifica la versión de Docker Compose

services:
  db: # Servicio para PostgreSQL (tu "pod" de base de datos)
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB} # Usará cookbot_db si no se define en .env
      POSTGRES_USER: ${POSTGRES_USER}     # Usará sa si no se define en .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # ¡CAMBIA ESTA CONTRASEÑA! Usará esta si no se define en .env
    ports:
      - "5432:5432" # Mapea el puerto 5432 del contenedor al puerto 5432 de tu máquina local
    volumes:
      - db_data:/var/lib/postgresql/data # Persistencia de datos

  app: # Servicio para tu aplicación Next.js (tu "pod" de aplicación)
    build:
      context: . # El contexto de construcción es el directorio actual (donde está el Dockerfile)
      dockerfile: Dockerfile # Nombre del Dockerfile para la app
    ports:
      # Mapea el puerto 3000 de tu máquina local al puerto 8080 del contenedor de la app.
      # ACA espera 8080 internamente, y 3000 es común para desarrollo local.
      - "3000:8080"
    environment:
      # CRUCIAL: La app se conecta a la BD usando el nombre del servicio 'db' como host
      # Ahora toma el valor de DATABASE_URL de los archivos .env
      DATABASE_URL: ${DATABASE_URL}
      # Ahora toma el valor de GEMINI_API_KEY de los archivos .env
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      # Ahora toma el valor de NODE_ENV de los archivos .env
      NODE_ENV: ${NODE_ENV}
      # El puerto que la app escucha dentro del contenedor. Asegúrate que tu Dockerfile use este.
      PORT: ${PORT:-8080} # Usa 8080 por defecto si no se especifica en .env
      # Si tienes OPENAI_API_KEY, también referénciala aquí
      OPENAI_API_KEY: ${OPENAI_API_KEY} 
    depends_on:
      - db # Asegura que el servicio 'db' se inicie antes que 'app'
    command: ["yarn", "start"] # Comando para iniciar la app en producción

volumes:
  db_data: # Define el volumen nombrado para la persistencia de datos de PostgreSQL
